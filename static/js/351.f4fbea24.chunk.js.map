{"version":3,"file":"static/js/351.f4fbea24.chunk.js","mappings":"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","sources":["services/pdf/downloadPdf.js","services/db/jsonToCsv.js","services/db/exportStore.js","services/db/convertToJsonString.js","services/db/convertFromJsonString.js","services/db/csvToJson.js","services/db/importStore.js","services/db/clearStore.js","components/inputs/file.js","components/settings/importStore.js","components/settings/settings.js"],"sourcesContent":["\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nexport const downloadPdf = (publishers) => {\n  let docDefinition = {\n    content: [],\n    pageMargins: 10,\n  };\n  let family;\n  publishers\n    ?.filter((p) => !p.familyHead || p.id === p.familyHead )\n    .forEach(\n      (head) => (\n        (family = [\n          {\n            svg: `<svg height=\"20\" width=\"580\"><line x1=\"0\" y1=\"18\" x2=\"580\" y2=\"18\" stroke=\"#4a6da7\" style=\"stroke-width:2\" /></svg>`,\n          },\n          {\n            columns: [\n              {\n                text: head.lastName.toUpperCase(),\n                fontSize: 18,\n                bold: true,\n                width: \"25%\",\n              },\n              { text: head.homePhone, width: \"25%\" },\n              {\n                text: `${head.unitNumber ? `${head.unitNumber}/` : \"\"}${head.houseNumber\n                } ${head.street}, ${head.suburb}`,\n                fontSize: 13,\n              },\n            ],\n          },\n          {\n            columns: [\n              { text: head.firstName, width: \"25%\" },\n              { text: head.mobilePhone, width: \"25%\" },\n              {\n                text: head.personalEmail,\n              },\n            ],\n          },\n        ])\n        (publishers\n          ?.filter((p) => p.id !== head.id && p.familyHead === head.id)\n          .forEach((member) =>\n            family.push([\n              {\n                columns: [\n                  { text: member.firstName, width: \"25%\" },\n                  { text: member.mobilePhone, width: \"25%\" },\n                  {\n                    text: member.personalEmail,\n                  },\n                ],\n              },\n            ])\n          ))\n        (docDefinition.content.push({ stack: family, unbreakable: true }))\n      )\n    );\n    console.log(docDefinition)\n\n  pdfMake.createPdf(docDefinition).download(\"damo.pdf\");\n  // const pdfDocGenerator = pdfMake.createPdf(docDefinition);\n  // pdfDocGenerator.getDataUrl((dataUrl) => {\n  //   const targetElement = document.querySelector(\"#download\");\n  //   const iframe = document.createElement(\"iframe\");\n  //   iframe.src = dataUrl;\n  //   targetElement.appendChild(iframe);\n  //   iframe.classList.add(\"fixed\", \"w-screen\", \"h-screen\");\n  // });\n};","export const jsonToCsv = (json) => {\n  const array = [Object.keys(json[1])].concat(json)\n\n  return array.map(it => {\n    return Object.values(it).toString()\n  }).join('\\r')\n}\n","import { convertToJsonString } from \"./convertToJsonString\";\nimport { db } from \"./dexie\";\n\nexport const exportStore = (store, format) => {\n\n  db.open()\n    .then(function () {\n      const idbDatabase = db.backendDB(); // get native IDBDatabase object from Dexie wrapper\n      // export to JSON, clear database, and import from JSON\n      convertToJsonString(idbDatabase, store, format, function (err, jsonString) {\n        if (err) {\n          console.error(err);\n        } else {\n          var today = new Date();\n          var dd = String(today.getDate()).padStart(2, \"0\");\n          var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n          var yyyy = today.getFullYear();\n          let data = jsonString;\n          const type = format === \"csv\" ? { \"text/csv\": [\".csv\"] } : { \"application/json\": [\".json\"] }\n          let blob = new Blob([data], type);\n          const href = URL.createObjectURL(blob);\n          const a = Object.assign(document.createElement(\"a\"), {\n            href,\n            style: \"display:none\",\n            download: \"publishers \" + yyyy + \"-\" + mm + \"-\" + dd + \".\" + format,\n          });\n          document.body.appendChild(a);\n          a.click();\n          URL.revokeObjectURL(href);\n          a.remove();\n        }\n      });\n    })\n    .catch(function (e) {\n      console.error(\"Could not connect. \" + e);\n    });\n};\n","import { jsonToCsv } from \"./jsonToCsv\";\n\n export const convertToJsonString = (idbDatabase, store, format, cb) => {\n  const exportObject = {};\n    // const objectStoreNamesSet = new Set(idbDatabase.objectStoreNames);\n  const objectStoreNamesSet = [store];\n  const size = objectStoreNamesSet.size;\n  if (size === 0) {\n    cb(null, (format === \"csv\") ? jsonToCsv(exportObject[store]) : JSON.stringify(exportObject));\n  } else {\n    const objectStoreNames = Array.from(objectStoreNamesSet);\n    const transaction = idbDatabase.transaction(objectStoreNames, \"readonly\");\n    transaction.onerror = (event) => cb(event, null);\n\n    objectStoreNames.forEach((storeName) => {\n      const allObjects = [];\n      transaction.objectStore(storeName).openCursor().onsuccess = (event) => {\n        const cursor = event.target.result;\n        if (cursor) {\n          allObjects.push(cursor.value);\n          cursor.continue();\n        } else {\n          exportObject[storeName] = allObjects;\n          if (objectStoreNames.length === Object.keys(exportObject).length) { \n            cb(null, (format === \"csv\") ? jsonToCsv(exportObject[store]) : JSON.stringify(exportObject));\n          }\n        }\n      };\n    });\n  }\n}","import { csvToJson } from \"./csvToJson\";\n\nexport const convertFromJsonString = (idbDatabase, string, fileType, cb) => {\n  const objectStoreNamesSet = new Set(idbDatabase.objectStoreNames);\n  const size = objectStoreNamesSet.size;\n  if (size === 0) {\n    cb(null);\n  } else {\n    const objectStoreNames = Array.from(objectStoreNamesSet);\n    const transaction = idbDatabase.transaction(objectStoreNames, \"readwrite\");\n    transaction.onerror = (event) => alert(\"cb(event)\");\n\n    let json;\n    if (fileType === \"text/csv\") {\n      json = JSON.parse(`{\"publishers\": ${csvToJson(string)}}`);\n    } else {\n      json = JSON.parse(string);\n    }\n    const importObject = json;\n    console.log(json)\n\n    // Delete keys present in JSON that are not present in database\n    Object.keys(importObject).forEach((storeName) => {\n      if (!objectStoreNames.includes(storeName)) {\n        delete importObject[storeName];\n      }\n    });\n\n    if (Object.keys(importObject).length === 0) {\n      // no object stores exist to import for\n      cb(null);\n    }\n\n    objectStoreNames.forEach((storeName) => {\n      let count = 0;\n\n      const aux = Array.from(importObject[storeName] || []);\n\n      if (importObject[storeName] && aux.length > 0) {\n        aux.forEach((toAdd) => {\n          const request = transaction.objectStore(storeName).add(toAdd);\n          request.onsuccess = () => {\n            count++;\n            if (count === importObject[storeName].length) {\n              // added all objects for this store\n              delete importObject[storeName];\n              if (Object.keys(importObject).length === 0) {\n                // added all object stores\n                cb(null);\n              }\n            }\n          };\n          request.onerror = (event) => {\n            console.log(event);\n          };\n        });\n      } else {\n        if (importObject[storeName]) {\n          delete importObject[storeName];\n          if (Object.keys(importObject).length === 0) {\n            // added all object stores\n            cb(null);\n          }\n        }\n      }\n    });\n  }\n};\n","import { toTitleCase } from \"../formatting/letterCase\";\n\nexport function csvToJson(csv) {\n  var lines = csv.split(\"\\r\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n    for (var j = 0; j < headers.length; j++) {\n      if (headers[j] === \"lastName\") {\n        obj[headers[j]] = toTitleCase(currentline[j]);\n      } else if (headers[j] === \"id\" || headers[j] === \"familyHead\") {\n        obj[headers[j]] = parseInt(currentline[j]);\n      } else {\n        obj[headers[j]] = currentline[j];\n      }\n    }\n    result.push(obj);\n  }\n\n  return JSON.stringify(result); //JSON\n}","import { clearStore } from \"./clearStore\";\nimport {convertFromJsonString} from \"./convertFromJsonString\"\nimport { db } from \"./dexie\";\n\nexport const importStore = (store) => {\n  let file = document.querySelector(\"#import-store\").files[0];\n  let reader = new FileReader();\n  reader.onloadend = () => {\n    console.log(file.type)\n    clearStore(db.backendDB(), store);\n    convertFromJsonString(db.backendDB(), reader.result, file.type, (err) => {console.log(err)});\n  };\n  reader.readAsText(file);\n};\n"," export const clearStore = (idbDatabase, store, cb) => {\n  //   const objectStoreNamesSet = new Set(idbDatabase.objectStoreNames);\n    const objectStoreNamesSet = [store];\n    const size = objectStoreNamesSet.size;\n    if (size === 0) {\n      cb(null);\n    } else {\n      const objectStoreNames = Array.from(objectStoreNamesSet);\n      const transaction = idbDatabase.transaction(objectStoreNames, \"readwrite\");\n      transaction.onerror = (event) => cb(event);\n  \n      let count = 0;\n      objectStoreNames.forEach(function (storeName) {\n        transaction.objectStore(storeName).clear().onsuccess = () => {\n          count++;\n          if (count === size) {\n            // cleared all object stores\n            cb(null);\n          }\n        };\n      });\n    }\n  }\n  ","export const FileInput = ({ id, label, helpText, types }) => {\n  return (\n    <>\n      <label\n        className=\"mb-2 block text-sm font-medium text-gray-900 xxx-dark:text-gray-300\"\n        htmlFor={id}\n      >\n        {label}\n      </label>\n      <input\n        className=\"block w-full cursor-pointer  border border-gray-300 bg-gray-50 text-sm text-gray-900 focus:outline-none xxx-dark:border-gray-600 xxx-dark:bg-gray-700 xxx-dark:text-gray-400 xxx-dark:placeholder-gray-400\"\n        aria-describedby=\"file_input_help\"\n        id={id}\n        type=\"file\"\n        accept={types}\n      />\n      <p\n        className=\"mt-1 text-sm text-gray-500 xxx-dark:text-gray-300\"\n        id=\"file_input_help\"\n      >\n        {helpText}\n      </p>\n    </>\n  );\n};\n","import { importStore } from \"../../services/db/importStore\";\nimport { FileInput } from \"../inputs/file\";\n\nexport const ImportStore = () => {\n  return (\n    <>\n      <div className=\"bg-white m-4 h-32 p-2 text-center relative\">\n        Import Congregation\n        <FileInput id=\"import-store\" label=\"\" helpText=\"\" types=\".ord,.csv\" />\n        <div\n          className=\"absolute right-4 w-fit bg-bg p-2 text-right\"\n          onClick={() => {\n            importStore(\"publishers\");\n          }}\n        >\n          Import\n        </div>\n      </div>\n    </>\n  );\n};\n","import { db } from \"../../services/db/dexie\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { Header } from \"../main/header\";\nimport { Content } from \"../main/content\";\n// import { useState } from \"react\";\n// import { Export } from \"./export\";\nimport { downloadPdf } from \"../../services/pdf/downloadPdf\";\nimport { exportStore } from \"../../services/db/exportStore\";\nimport { ImportStore } from \"./importStore\";\n\n\nexport const Settings = () => {\n  const publishers = useLiveQuery(() =>\n    db.publishers.orderBy(\"[lastName+firstName]\").toArray()\n  );\n  // const exportScreen = () => {};\n\n  // const importScreen = () => {};\n\n  // const [page, setPage] = useState(<Export />);\n\n  return (\n    <>\n      <Header\n        headerLeft={<div></div>}\n        title={<div className=\"text-header font-bold\">Settings</div>}\n        headerRight={<div className=\"text-header text-primary\"></div>}\n      />\n      <Content bgColor={\"bg-bgLightest \"}>\n        <div\n          className=\"m-4 bg-white p-4 text-center\"\n          onClick={() => {\n            downloadPdf(publishers);\n          }}\n        >\n          Export Congregation to PDF Contact List\n        </div>\n        <div\n          className=\"m-4 bg-white p-4 text-center\"\n          onClick={() => {\n            exportStore(\"publishers\", \"ord\");\n          }}\n        >\n          Export Congregation to Orderly file\n        </div>\n        <div\n          className=\"m-4 bg-white p-4 text-center\"\n          onClick={() => {\n            exportStore(\"publishers\", \"csv\");\n          }}\n        >\n          Export Congregation to CSV file\n        </div>\n        <ImportStore />\n      </Content>\n    </>\n  );\n};\n"],"names":["pdfMake","pdfFonts","jsonToCsv","json","Object","keys","concat","map","it","values","toString","join","exportStore","store","format","db","then","idbDatabase","cb","exportObject","objectStoreNamesSet","size","JSON","stringify","objectStoreNames","Array","from","transaction","onerror","event","forEach","storeName","allObjects","objectStore","openCursor","onsuccess","cursor","target","result","push","value","continue","length","convertToJsonString","err","jsonString","console","error","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","blob","Blob","href","URL","createObjectURL","a","assign","document","createElement","style","download","body","appendChild","click","revokeObjectURL","remove","catch","e","convertFromJsonString","string","fileType","Set","alert","importObject","parse","csv","lines","split","headers","i","obj","currentline","j","toTitleCase","parseInt","csvToJson","log","includes","count","aux","toAdd","request","add","importStore","file","querySelector","files","reader","FileReader","onloadend","type","clear","clearStore","readAsText","FileInput","id","label","helpText","types","className","htmlFor","accept","ImportStore","onClick","Settings","publishers","useLiveQuery","toArray","headerLeft","title","headerRight","bgColor","family","docDefinition","content","pageMargins","filter","p","familyHead","head","svg","columns","text","lastName","toUpperCase","fontSize","bold","width","homePhone","unitNumber","houseNumber","street","suburb","firstName","mobilePhone","personalEmail","member","stack","unbreakable","downloadPdf"],"sourceRoot":""}