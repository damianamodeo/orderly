{"version":3,"file":"static/js/117.35a966f2.chunk.js","mappings":"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","sources":["services/pdf/downloadPdf.js","services/db/jsonToCsv.js","services/db/exportStore.js","services/db/convertToJsonString.js","components/buttons/button.js","components/text/help-text.js","components/inputs/file.js","services/db/convertFromJsonString.js","services/db/csvToJson.js","services/db/importStores.js","services/db/clearStore.js","components/pages/settings/settings.js"],"sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nexport const downloadPdf = (publishers) => {\n  let docDefinition = {\n    content: [],\n    pageMargins: 10,\n  };\n  let family;\n  publishers\n    ?.filter((p) => !p.familyHead || p.id === p.familyHead)\n    .forEach(\n      (head) => (\n        (family = [\n          {\n            svg: `<svg height=\"20\" width=\"580\"><line x1=\"0\" y1=\"18\" x2=\"580\" y2=\"18\" stroke=\"#4a6da7\" style=\"stroke-width:2\" /></svg>`,\n          },\n          {\n            columns: [\n              {\n                text: head.lastName.toUpperCase(),\n                fontSize: 18,\n                bold: true,\n                lineHeight: 1.2,\n                width: \"25%\",\n              },\n              { text: head.homePhone, width: \"20%\" },\n              {\n                text: `${head.unitNumber ? `${head.unitNumber}/` : \"\"}${\n                  head.houseNumber\n                } ${head.street}, ${head.suburb}`,\n                fontSize: 18,\n                bold: true,\n                alignment: \"right\",\n                link: `https://www.google.com/maps/place/${head.houseNumber}+${head.street},+${head.suburb}`,\n              },\n            ],\n          },\n          {\n            columns: [\n              { text: head.firstName, width: \"25%\", lineHeight: 1.4 },\n              {\n                text: head.mobilePhone,\n                width: \"20%\",\n                link: `tel://${head.mobilePhone}`,\n              },\n              {\n                text: head.personalEmail,\n                link: `mailto:${head.personalEmail}`,\n                alignment: \"right\",\n              },\n            ],\n          },\n        ]),\n        publishers\n          ?.filter((p) => p.id !== head.id && p.familyHead === head.id)\n          .forEach((member) =>\n            family.push([\n              {\n                columns: [\n                  { text: member.firstName, width: \"25%\", lineHeight: 1.4 },\n                  {\n                    text: member.mobilePhone,\n                    width: \"20%\",\n                    link: `tel://${member.mobilePhone}`,\n                  },\n                  {\n                    text: member.personalEmail,\n                    link: `mailto:${member.personalEmail}`,\n                    alignment: \"right\",\n                  },\n                ],\n              },\n            ])\n          ),\n        docDefinition.content.push({ stack: family, unbreakable: true })\n      )\n    );\n  console.log(docDefinition);\n\n  pdfMake.createPdf(docDefinition).download(\"damo.pdf\");\n};\n","export const jsonToCsv = (json) => {\n  const array = [Object.keys(json[1])].concat(json)\n\n  return array.map(it => {\n    return Object.values(it).toString()\n  }).join('\\r')\n}\n","import { convertToJsonString } from \"./convertToJsonString\";\nimport { db } from \"./dexie\";\n\nexport const exportStore = (store, format) => {\n\n  db.open()\n    .then(function () {\n      const idbDatabase = db.backendDB(); // get native IDBDatabase object from Dexie wrapper\n      // export to JSON, clear database, and import from JSON\n      convertToJsonString(idbDatabase, store, format, function (err, jsonString) {\n        if (err) {\n          console.error(err);\n        } else {\n          var today = new Date();\n          var dd = String(today.getDate()).padStart(2, \"0\");\n          var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n          var yyyy = today.getFullYear();\n          let data = jsonString;\n          const type = format === \"csv\" ? { \"text/csv\": [\".csv\"] } : { \"application/json\": [\".json\"] }\n          let blob = new Blob([data], type);\n          const href = URL.createObjectURL(blob);\n          const a = Object.assign(document.createElement(\"a\"), {\n            href,\n            style: \"display:none\",\n            download: \"publishers \" + yyyy + \"-\" + mm + \"-\" + dd + \".\" + format,\n          });\n          document.body.appendChild(a);\n          a.click();\n          URL.revokeObjectURL(href);\n          a.remove();\n        }\n      });\n    })\n    .catch(function (e) {\n      console.error(\"Could not connect. \" + e);\n    });\n};\n","import { jsonToCsv } from \"./jsonToCsv\";\n\n export const convertToJsonString = (idbDatabase, store, format, cb) => {\n  const exportObject = {};\n    // const objectStoreNamesSet = new Set(idbDatabase.objectStoreNames);\n  const objectStoreNamesSet = [store];\n  const size = objectStoreNamesSet.size;\n  if (size === 0) {\n    cb(null, (format === \"csv\") ? jsonToCsv(exportObject[store]) : JSON.stringify(exportObject));\n  } else {\n    const objectStoreNames = Array.from(objectStoreNamesSet);\n    const transaction = idbDatabase.transaction(objectStoreNames, \"readonly\");\n    transaction.onerror = (event) => cb(event, null);\n\n    objectStoreNames.forEach((storeName) => {\n      const allObjects = [];\n      transaction.objectStore(storeName).openCursor().onsuccess = (event) => {\n        const cursor = event.target.result;\n        if (cursor) {\n          allObjects.push(cursor.value);\n          cursor.continue();\n        } else {\n          exportObject[storeName] = allObjects;\n          if (objectStoreNames.length === Object.keys(exportObject).length) { \n            cb(null, (format === \"csv\") ? jsonToCsv(exportObject[store]) : JSON.stringify(exportObject));\n          }\n        }\n      };\n    });\n  }\n}","export const Button = ({ action, children }) => {\n  return (\n    <div\n      className=\"dark:bg-buttonD w-56 text-center bg-button p-2 text-white dark:text-black m-auto\"\n      onClick={action}\n    >\n      {children}\n    </div>\n  );\n};\n","export const HelpText = ({addStyle, children}) => {\n  return (\n    <span className={\"inline-block align-baseline dark:text-white \" + addStyle}>{children}</span>\n  )\n}","import { useState } from \"react\";\nimport { Button } from \"../buttons/button\";\nimport { HelpText } from \"../text/help-text\";\n\nexport const FileInput = ({ id, label, helpText, fileTypes }) => {\n  const [text, setText] = useState(helpText);\n\n  return (\n    <>\n      <input\n        id={id}\n        type=\"file\"\n        accept=\"application/ord, .ord, text/ord, text/*, text/.ord, application/.ord, ord, json/ord\"\n        hidden=\"hidden\"\n        onChange={(e) => {\n          setText(e.target.value.match(/[/\\\\]([\\w\\d\\s.\\-()]+)$/)[1]);\n        }}\n      />\n      <div className=\"my-3 flex flex-col content-center gap-5 text-center\">\n        <Button\n          action={() => {\n            const fileInput = document.getElementById(id);\n            fileInput.click();\n          }}\n        >\n          Choose File json\n        </Button>\n        <HelpText>{text}</HelpText>\n      </div>\n    </>\n  );\n};\n","import { csvToJson } from \"./csvToJson\";\n\nexport const convertFromJsonString = (idbDatabase, string, fileType, cb) => {\n  const objectStoreNamesSet = new Set(idbDatabase.objectStoreNames);\n  const size = objectStoreNamesSet.size;\n  if (size === 0) {\n    cb(null);\n  } else {\n    const objectStoreNames = Array.from(objectStoreNamesSet);\n    const transaction = idbDatabase.transaction(objectStoreNames, \"readwrite\");\n    transaction.onerror = (event) => alert(\"cb(event)\");\n\n    let json;\n    if (fileType === \"text/csv\") {\n      json = JSON.parse(`{\"publishers\": ${csvToJson(string)}}`);\n    } else {\n      json = JSON.parse(string);\n    }\n    const importObject = json;\n    console.log(json)\n\n    // Delete keys present in JSON that are not present in database\n    Object.keys(importObject).forEach((storeName) => {\n      if (!objectStoreNames.includes(storeName)) {\n        delete importObject[storeName];\n      }\n    });\n\n    if (Object.keys(importObject).length === 0) {\n      // no object stores exist to import for\n      cb(null);\n    }\n\n    objectStoreNames.forEach((storeName) => {\n      let count = 0;\n\n      const aux = Array.from(importObject[storeName] || []);\n\n      if (importObject[storeName] && aux.length > 0) {\n        aux.forEach((toAdd) => {\n          const request = transaction.objectStore(storeName).add(toAdd);\n          request.onsuccess = () => {\n            count++;\n            if (count === importObject[storeName].length) {\n              // added all objects for this store\n              delete importObject[storeName];\n              if (Object.keys(importObject).length === 0) {\n                // added all object stores\n                cb(null);\n              }\n            }\n          };\n          request.onerror = (event) => {\n            console.log(event);\n          };\n        });\n      } else {\n        if (importObject[storeName]) {\n          delete importObject[storeName];\n          if (Object.keys(importObject).length === 0) {\n            // added all object stores\n            cb(null);\n          }\n        }\n      }\n    });\n  }\n};\n","import { toTitleCase } from \"../formatting/letterCase\";\n\nexport function csvToJson(csv) {\n  var lines = csv.split(\"\\r\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n    for (var j = 0; j < headers.length; j++) {\n      if (headers[j] === \"lastName\") {\n        obj[headers[j]] = toTitleCase(currentline[j]);\n      } else if (headers[j] === \"id\" || headers[j] === \"familyHead\") {\n        obj[headers[j]] = parseInt(currentline[j]);\n      } else {\n        obj[headers[j]] = currentline[j];\n      }\n    }\n    result.push(obj);\n  }\n\n  return JSON.stringify(result); //JSON\n}","import { clearStore } from \"./clearStore\";\nimport {convertFromJsonString} from \"./convertFromJsonString\"\nimport { db } from \"./dexie\";\n\nexport const importStores = (store) => {\n  let file = document.querySelector(\"#import-stores\").files[0];\n  let reader = new FileReader();\n  reader.onloadend = () => {\n    console.log(file.type)\n    clearStore(db.backendDB(), store);\n    convertFromJsonString(db.backendDB(), reader.result, file.type, (err) => {console.log(err)});\n  };\n  reader.readAsText(file);\n};\n"," export const clearStore = (idbDatabase, store, cb) => {\n  //   const objectStoreNamesSet = new Set(idbDatabase.objectStoreNames);\n    const objectStoreNamesSet = [store];\n    const size = objectStoreNamesSet.size;\n    if (size === 0) {\n      cb(null);\n    } else {\n      const objectStoreNames = Array.from(objectStoreNamesSet);\n      const transaction = idbDatabase.transaction(objectStoreNames, \"readwrite\");\n      transaction.onerror = (event) => cb(event);\n  \n      let count = 0;\n      objectStoreNames.forEach(function (storeName) {\n        transaction.objectStore(storeName).clear().onsuccess = () => {\n          count++;\n          if (count === size) {\n            // cleared all object stores\n            cb(null);\n          }\n        };\n      });\n    }\n  }\n  ","import { db } from \"../../../services/db/dexie\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { Header } from \"../../main/header\";\nimport { Content } from \"../../main/content\";\n// import { useState } from \"react\";\n// import { Export } from \"./export\";\nimport { downloadPdf } from \"../../../services/pdf/downloadPdf\";\nimport { exportStore } from \"../../../services/db/exportStore\";\nimport { Card } from \"../../../temp/components/card\";\n// import { Text } from \"../../text/default\";\nimport { Heading } from \"../../text/heading\";\nimport { Button } from \"../../buttons/button\";\nimport { CardLabel } from \"../../text/card-label\";\nimport { FileInput } from \"../../inputs/file\";\nimport { importStores } from \"../../../services/db/importStores\";\n\nexport const Settings = () => {\n  const publishers = useLiveQuery(() =>\n    db.publishers.orderBy(\"[lastName+firstName]\").toArray()\n  );\n  // const exportScreen = () => {};\n\n  // const importScreen = () => {};\n\n  // const [page, setPage] = useState(<Export />);\n\n  return (\n    <>\n      <Header\n        headerLeft={<div></div>}\n        title={<Heading>Settings</Heading>}\n        headerRight={<div className=\"text-header text-primary\"></div>}\n      />\n      <Content bgColor={\"bg-bgLightest dark:bg-black \"}>\n        <Card>\n          <CardLabel>Export Congregation</CardLabel>\n          <div className=\"my-3 flex flex-col content-center gap-8\">\n            <Button\n              action={() => {\n                downloadPdf(publishers);\n              }}\n            >\n              PDF\n            </Button>\n            <Button\n              action={() => {\n                exportStore(\"publishers\", \"ord\");\n              }}\n            >\n              ORD\n            </Button>\n            <Button\n              action={() => {\n                exportStore(\"publishers\", \"csv\");\n              }}\n            >\n              CSV\n            </Button>\n          </div>\n        </Card>\n        <Card>\n          <CardLabel>Import Congregation</CardLabel>\n\n          <div className=\"my-3 flex flex-col content-center gap-3\">\n            <FileInput\n              id=\"import-stores\"\n              label=\"\"\n              helpText=\"Select a .csv or .ord file\"\n              fileTypes=\".ord\"\n            />\n            {}\n            <Button\n              action={() => {\n                importStores(\"publishers\");\n              }}\n            >\n              Import\n            </Button>\n          </div>\n        </Card>\n      </Content>\n    </>\n  );\n};\n"],"names":["pdfMake","pdfFonts","jsonToCsv","json","Object","keys","concat","map","it","values","toString","join","exportStore","store","format","db","then","idbDatabase","cb","exportObject","objectStoreNamesSet","size","JSON","stringify","objectStoreNames","Array","from","transaction","onerror","event","forEach","storeName","allObjects","objectStore","openCursor","onsuccess","cursor","target","result","push","value","continue","length","convertToJsonString","err","jsonString","console","error","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","blob","Blob","href","URL","createObjectURL","a","assign","document","createElement","style","download","body","appendChild","click","revokeObjectURL","remove","catch","e","Button","action","children","className","onClick","HelpText","addStyle","FileInput","id","helpText","label","fileTypes","useState","text","setText","type","accept","hidden","onChange","match","getElementById","convertFromJsonString","string","fileType","Set","alert","importObject","parse","csv","lines","split","headers","i","obj","currentline","j","toTitleCase","parseInt","csvToJson","log","includes","count","aux","toAdd","request","add","importStores","file","querySelector","files","reader","FileReader","onloadend","clear","clearStore","readAsText","Settings","publishers","useLiveQuery","toArray","headerLeft","title","headerRight","bgColor","family","docDefinition","content","pageMargins","filter","p","familyHead","head","svg","columns","lastName","toUpperCase","fontSize","bold","lineHeight","width","homePhone","unitNumber","houseNumber","street","suburb","alignment","link","firstName","mobilePhone","personalEmail","member","stack","unbreakable","downloadPdf"],"sourceRoot":""}